{
  "createdAt": 1652327506346,
  "updatedAt": 1652328751944,
  "thumbnail": "https://academy.sentre.io/static/media/ds2-thumbnail.37b81891d1e8e3a58281.png",
  "category": [
    "dev"
  ],
  "en": {
    "contents": "Trong [Workshop 1](https://academy.sentre.io/#/blogs/dapp-on-solana-1?category=dev), chúng ta đã hoàn thành Solana program cho hệ thống bỏ phiếu có trọng số. Trong bài này, chúng ta sẽ cùng nhau phát triển giao diện đơn giản cũng như kết nối giao diện đó với Solana program để thực hiện việc giao tiếp cho hệ thống.\n\n\n## **Building the React App**\nTrong thư mục gốc của dự án Anchor, tạo một React app mới để ghi đè lên thư mục app hiện có:\n\n```ts\nnpx create-react-app app --template typescript\ncd app\n```\n\nTham khảo [bài số 2](https://academy.sentre.io/#/blogs/design-dapp-ui?category=dev) và [bài số 3](https://academy.sentre.io/#/blogs/manage-dapp-state?category=dev) để cài đặt ứng dụng cũng như các dependencies.\n\n\n### **Kết nối đến ví**\nỞ các bài trước, chúng ta đã tìm hiểu về Goki, cách kết nối ví và lưu thông tin ví vào Redux để có thể sử dụng, quản lý một cách hiệu quả. Tương tự như vậy, chúng ta ứng dụng lại vào chương trình và tạo kết nối đến ví người dùng.\n\n```ts\n// view/app/index.tsx\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useWalletKit, useSolana, useConnectedWallet } from '@gokiprotocol/walletkit'\n\nimport { Button, Col, Layout, Row, Typography } from 'antd'\nimport ListCandidates from 'view/listCandidates'\nimport CandidateCreate from 'view/candidateCreate'\n\nimport { setWalletInfo, WalletState } from 'store/wallet.reducer'\nimport { AppDispatch } from 'store'\n\nconst { Header, Content } = Layout\n\nfunction App() {\n  const dispatch = useDispatch<AppDispatch>()\n  const wallet = useConnectedWallet()\n  const { connect } = useWalletKit()\n  const { providerMut } = useSolana()\n\n  const fetchWalletInfo = useCallback(async () => {\n    if (!wallet || !providerMut) return\n    // TODO: fetch SOL balance\n    const lamports = await providerMut.connection.getBalance(wallet.publicKey)\n    let walletInfo: WalletState = {\n      walletAddress: wallet.publicKey.toBase58(),\n      balance: lamports,\n    }\n    dispatch(setWalletInfo(walletInfo))\n  }, [providerMut, wallet])\n\n  useEffect(() => {\n    fetchWalletInfo()\n  }, [fetchWalletInfo])\n\n  return (\n    <Layout style={{ height: '100vh' }}>\n      <Header>\n        <Col span={24}>\n          {wallet ? (\n            <Col span={24} style={{ color: 'white' }}>\n              {wallet.publicKey.toBase58()}\n            </Col>\n          ) : (\n            <Button type=\"primary\" style={{ borderRadius: 40 }} onClick={connect}>\n              Connect Wallet\n            </Button>\n          )}\n        </Col>\n      </Header>\n      <Content style={{ padding: 40 }}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <Row gutter={[24, 24]}>\n              <Col flex=\"auto\">\n                <Typography.Title>List Candidates</Typography.Title>\n              </Col>\n              <Col>\n                <CandidateCreate />\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            <ListCandidates />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default App\n```\n\n### **Giao diện bỏ phiếu**\n\n#### **Danh sách Candidate**\nGiao diện List candidates thể hiện cách thông tin: **candidate, start_date, end_date, …**\n\n\n![](https://academy.sentre.io/static/media/post-6-h1.a72f76ebb18473abedef.png)\n*Hình 1. Danh sách các ứng viên vào thông tin bỏ phiếu.*\n\n#### **Hàm khởi tạo ứng viên (New candidate)**\nGiao diện khởi tạo candidate cần các thông tin cơ bản như địa chỉ token để bỏ phiếu, ngày bắt đầu, ngày kết thúc bỏ phiếu.\n\n\n![](https://academy.sentre.io/static/media/post-6-h2.ba78517cd8d683ad0e10.png)\n*Hình 2. Giao diện khởi tạo thông tin cho ứng viên.*\n\n#### **Hàm bỏ phiếu (Vote)**\n\n\n![](https://academy.sentre.io/static/media/post-6-h3.1e5b88f42343e518990e.png)\n*Hình 3. Cử tri nhập số lượng tokens để bầu cho ứng viên.*\n\n### **Kết nối đến Solana Program (Smart Contract)**\n\nSao chép tệp **target/types/l6.ts** vào thư mục **app/config** và đặt tên **idl.ts**. Tệp này giúp định nghĩa các giao diện (interface) của Solana program. Nó giúp các chương trình off-chain, có thể là frontend hoặc backend với các ngôn ngữ khác nhau, biết các để giao tiếp với chương trình chạy on-chain. Nếu các bạn đã quen thuộc với Ethereum thì tệp IDL này có ý nghĩa tương đương với ABI.\n\nTiếp đến chúng ta phải tạo file config để định nghĩa kết nối. Cụ thể là mạng **devnet**.\n\n```ts\n// app/src/config/index.ts\nimport * as anchor from '@project-serum/anchor'\nimport { clusterApiUrl } from '@solana/web3.js'\n\nimport { IDL } from './idl'\n\nexport const DEFAULT_COMMITMENT = 'confirmed'\nexport const DEFAULT_CLUSTER = 'devnet'\nexport const PROGRAM_ADDRESS = new anchor.web3.PublicKey(\n  'HCoUastFpW7wB9Ue4o4YHy27VTuiJEo7h9hKmhnXDQhD',\n)\nexport const NODE_URL = clusterApiUrl(DEFAULT_CLUSTER)\n\nexport type CandidateData = {\n  address: string\n  mint: string\n  amount: number\n  startTime: number\n  endTime: number\n}\n\n// Function support\nexport const getProvider = (wallet: any) => {\n  const connection = new anchor.web3.Connection(NODE_URL, DEFAULT_COMMITMENT)\n  return new anchor.Provider(connection, wallet, {\n    preflightCommitment: DEFAULT_COMMITMENT,\n  })\n}\n\nexport const getProgram = (wallet: any) => {\n  const provider = getProvider(wallet)\n  return new anchor.Program(IDL, PROGRAM_ADDRESS, provider)\n}\n```\n\n\nViết hàm gọi và truyền vào các tham số định nghĩa ở IDL để tạo ứng viên\n\n```ts\nawait program.rpc.initializeCandidate(new anchor.BN(startTime), new anchor.BN(endTime), {\n  accounts: {\n    authority: wallet.publicKey,\n    candidate: candidate.publicKey,\n    treasurer,\n    mint: new anchor.web3.PublicKey(mintAddress),\n    candidateTokenAccount,\n    tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,\n    associatedTokenProgram: anchor.utils.token.ASSOCIATED_PROGRAM_ID,\n    systemProgram: anchor.web3.SystemProgram.programId,\n    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n  },\n  signers: [candidate],\n})\n```\n\nTạo hàm bỏ phiếu cho ứng viên\n\n```ts\nawait program.rpc.vote(new anchor.BN(amount), {\n    accounts: {\n    authority: wallet.publicKey,\n    candidate: candidatePublicKey,\n    treasurer,\n    mint: candidateData.mint,\n    candidateTokenAccount,\n    ballot,\n    voterTokenAccount: walletTokenAccount,\n    tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,\n    associatedTokenProgram: anchor.utils.token.ASSOCIATED_PROGRAM_ID,\n    systemProgram: anchor.web3.SystemProgram.programId,\n    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n  },\n  signers: [],\n  })\n```\n\nTạo hàm close vote\n\n```ts\nawait program.rpc.close({\naccounts: {\n  authority: wallet.publicKey,\n  candidate: candidatePublicKey,\n  treasurer,\n  mint: candidateData.mint,\n  candidateTokenAccount,\n  ballot,\n  voterTokenAccount: walletTokenAccount,\n  tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,\n  associatedTokenProgram: anchor.utils.token.ASSOCIATED_PROGRAM_ID,\n  systemProgram: anchor.web3.SystemProgram.programId,\n  rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n},\nsigners: [],\n})\n```\n\n## **Tham khảo**\nExample repository: [https://github.com/tuphan-dn/evoting-system](https://github.com/tuphan-dn/evoting-system)\n\nBlockchain là gì?: [https://academy.sentre.io/#/blogs/what-is-blockchain?category=dev](https://academy.sentre.io/#/blogs/what-is-blockchain?category=dev)\n\nThiết kế giao diện DApp: [https://academy.sentre.io/#/blogs/design-dapp-ui?category=dev](https://academy.sentre.io/#/blogs/design-dapp-ui?category=dev)\n\nQuản lý State của Dapp: [https://academy.sentre.io/#/blogs/manage-dapp-state?category=dev](https://academy.sentre.io/#/blogs/manage-dapp-state?category=dev)\n\nViết phần mềm Solana đầu tiên: [https://academy.sentre.io/#/blogs/first-solana-program?category=dev](https://academy.sentre.io/#/blogs/first-solana-program?category=dev)\n\nPDA và chuẩn SPLT trong lập trình Solana: [https://academy.sentre.io/#/blogs/pda-and-splt-on-solana?category=dev](https://academy.sentre.io/#/blogs/pda-and-splt-on-solana?category=dev)\n\nXây dựng DApp đầu tiên trên Solana (phần 1): [https://academy.sentre.io/#/blogs/dapp-on-solana-1?category=dev](https://academy.sentre.io/#/blogs/dapp-on-solana-1?category=dev)",
    "title": "Xây dựng Solana DApp đầu tiên (P2)"
  },
  "vn": {
    "title": "",
    "contents": ""
  }
}