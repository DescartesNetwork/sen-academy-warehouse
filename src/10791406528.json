{
  "createdAt": 1652344198125,
  "updatedAt": 1652769731628,
  "thumbnail": "https://i.imgur.com/eOXDL0h.png",
  "category": [
    "blockchain",
    "solana",
    "dev",
    "web3camp"
  ],
  "en": {
    "contents": "Ấn tượng đầu tiên luôn là quan trọng nhất. Để xây dựng một DApp hoàn chỉnh, được nhiều người dùng lựa chọn sử dụng, bạn cần chú ý tới “bộ mặt” - giao diện của DApp.\nVậy, làm thế nào để thiết kế giao diện cơ bản cho DApp? Hãy cùng tìm hiểu về ReactJS và Ant Design - các thư viện UI đang được những ứng dụng toàn cầu như Facebook, Shopee, Lazada,… sử dụng cho giao diện của họ.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://www.youtube.com/embed/hxk9-Pyxm2M?list=PLTYZbOVtStqGySBwPhVL07iRH3H7ZOsag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n# Xây dựng giao diện bằng ReactJS\nHiện nay, hầu hết lập trình viên Frontend đều biết đến hoặc đã từng nghe qua về ReactJS. ReactJS là một thư viện Javascript được phát triển tại Facebook nhằm tăng tốc và giảm bug trong quá trình xây dựng giao diện, đồng thời giúp việc phát triển và bảo trì mã nguồn trở nên dễ dàng hơn.\n\n## Các khái niệm cơ bản\nTrước khi học cách sử dụng ReactJS, bạn cần nắm một số khái niệm cơ bản gồm:\n\n* Virtual DOM: Ở DOM tree truyền thống, khi một node thay đổi, toàn bộ node sẽ tái cấu trúc. Như vậy đồng nghĩa với việc DOM tree cũng sẽ phải thay đổi một phần, điều này sẽ ảnh hưởng đến tốc độ xử lý. ReactJS sử dụng Virtual DOM (DOM ảo) để cải thiện vấn đề này. Công nghệ DOM ảo giúp tăng hiệu năng cho ứng dụng bằng cách tính toán tối ưu hoá việc re-render DOM tree thật khi dữ liệu thay đổi.\n* JSX: Một dạng ngôn ngữ cho phép viết các mã HTML trong Javascript.\n* Components: ReactJS được xây dựng xung quanh các component, chúng ta có thể tái sử dụng component ở nhiều nơi. Việc này giúp dễ dàng bảo trì mã code. \n* Props: Input của Component nhận gọi là props, props được truyền vào và không thể thay đổi.\n* State: thể hiện trạng thái của component, khi state thay đổi bằng các phương thức setState thì component đồng thời render lại để cập nhật UI.\n\n## Các bước cài đặt và khởi chạy ReactJS\n\n### Bước 1. Cài đặt NodeJS và NPM\n\nĐể cài đặt môi trường chạy ReactJS, trước tiên bạn phải cài đặt NodeJS và NPM - đây là nền tảng bắt buộc.\n\n1. Truy cập https://nodejs.org/en/download/, chọn và tải phiên bản phù hợp với hệ điều hành của bạn. Tiến hành cài đặt theo mặc định.\n![](https://lh6.googleusercontent.com/aSOxskWyHXgt-t8XNzoPIbOXm2xn3JKPZeKSVSzbBHfdCN-TKAa8cWrsRRWTmu2x7smxwYXymUXoxC4nALL6UeAqutKyCSrkrlBBkCH2eeZzQnoGEFn0tQUlYWsEibrabQcEqhIG)\n\n\n2. Hãy kiểm tra lại phiên bản để xác nhận đã cài thành công bằng cách mở Terminal và gõ dòng lệnh sau:\n\n```shell\nnode -v\nv14.17.4\nnpm -v\n6.14.14\n```\n\nTham khảo thêm tại:\n \n* https://create-react-app.dev/docs/getting-started\n* https://create-react-app.dev/docs/adding-typescript/\n\n### Bước 2. Khởi tạo ReactJS App\n\nĐể khởi tạo một dự án sử dụng ReactJS vào trong thư mục chứa dự án, bạn hãy mở Terminal và gõ dòng lệnh sau:\n\n```shell\nnpx create-react-app my-app --template typescript\ncd my-app\n```\n\nTrong đó, `my-app` là tên thư mục chứa dự án của bạn.\n\n### Bước 3. Cài đặt package + webpack\n1. Cập nhật nội dung file `package.json` như sau:\n\n```json\n{\n  \"name\": \"my-app\",\n  \"dependencies\": {\n  \"@emotion/react\": \"^11.8.1\",\n  \"@emotion/styled\": \"^11.8.1\",\n  \"@saberhq/use-solana\": \"^1.12.48\",\n  \"@gokiprotocol/walletkit\": \"^1.6.4\",\n  \"@reduxjs/toolkit\": \"^1.7.2\",\n  \"@solana/buffer-layout\": \"^4.0.0\",\n  \"antd\": \"^4.18.2\",\n  \"react\": \"^17.0.2\",\n  \"react-dom\": \"^17.0.2\",\n  \"react-router-dom\": \"^5.3.0\",\n  \"web-vitals\": \"^2.1.4\",\n  \"@testing-library/jest-dom\": \"^5.16.3\",\n  \"@testing-library/react\": \"^12.1.4\",\n  \"@testing-library/user-event\": \"^13.5.0\",\n  \"@types/jest\": \"^27.4.1\"\n},\n\"scripts\": {\n  \"start\": \"craco start\",\n  \"build\": \"craco build\",\n  \"test\": \"craco test\"\n},\n\"browserslist\": {\n  \"production\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not op_mini all\"\n  ],\n  \"development\": [\n    \"last 1 chrome version\",\n    \"last 1 firefox version\",\n    \"last 1 safari version\"\n  ]\n},\n\"devDependencies\": {\n  \"@craco/craco\": \"^6.4.0\",\n  \"@types/node\": \"^16.11.26\",\n  \"@types/react\": \"^17.0.39\",\n  \"@types/react-dom\": \"^17.0.11\",\n  \"@types/react-router-dom\": \"^5.3.3\",\n  \"assert\": \"^2.0.0\",\n  \"dotenv-cra\": \"^3.0.2\",\n  \"gh-pages\": \"^3.2.3\",\n  \"less\": \"^4.1.2\",\n  \"less-loader\": \"^10.2.0\",\n  \"react-scripts\": \"^5.0.0\",\n  \"typescript\": \"^4.5.2\"\n  }\n}\n```\n\n2. Tạo folder plugins và tạo mới 3 file với nội dung như sau:\n\n*plugins/craco-compatibility.js*\n\n```ts\n/**\n* Maintain Webpack 5 compatibility\n*/\nconst path = require('path')\nconst webpack = require('webpack')\n\nconst overrideWebpackConfig = ({ context, webpackConfig }) => {\n // Add buffer to Webpack 5 polyfill\n // https://github.com/diegomura/react-pdf/issues/1029\n webpackConfig.plugins.push(\n   new webpack.ProvidePlugin({\n     Buffer: ['buffer', 'Buffer'],\n   }),\n )\n // Add polyfill libraries\n webpackConfig.resolve.fallback = {\n   // For Ethereum Web3\n   assert: require.resolve('assert/'),\n }\n\n // Fix unrecognized change / caching problem\n webpackConfig.cache.buildDependencies.config.push(\n   path.join(context.paths.appPath, './craco.config.js'),\n )\n // Fix \"fully specified\"\n // https://github.com/webpack/webpack/issues/11467#issuecomment-808618999/\n webpackConfig.module.rules.push({\n   test: /\\.m?js/,\n   resolve: {\n     fullySpecified: false,\n   },\n })\n return webpackConfig\n}\n\nmodule.exports = { overrideWebpackConfig }\n```\n\n*plugins/craco-silence.js*\n\n```ts\n/**\n* Disable warnings & Minimal logs\n*/\n\nconst path = require('path')\nconst overrideWebpackConfig = ({ context, webpackConfig, pluginOptions }) => {\n  // Disable verbose stat\n  webpackConfig.stats = 'errors-only'// Disable \"Failed to parse source map\"\n  const pathSep = path.sep\n\n  webpackConfig.module.rules.forEach((rule) => {\n    if (rule.loader?.includes(`${pathSep}source-map-loader${pathSep}`)) {\n      const { exclude } = rule\n      if (typeof exclude === 'array') exclude.push(/node_modules/)\n      else rule.exclude = [exclude, /node_modules/]\n    }\n  })\n  return webpackConfig\n}\n\nconst overrideDevServerConfig = ({\n  devServerConfig,\n  cracoConfig,\n  pluginOptions,\n  context,\n}) => {\n  devServerConfig.client.overlay = {\n    warnings: false,\n    errors: true,\n  }\n  return devServerConfig\n}\n\nmodule.exports = { overrideWebpackConfig, overrideDevServerConfig }\n```\n        \n*plugin/scraco-wasm.js*\n\n```ts\n/**\n* WebAssembly loader for Webpack 5\n*/\nconst overrideWebpackConfig = ({ context, webpackConfig, pluginOptions }) => {\n  const wasmExtensionRegExp = /\\.wasm$/\n\n  // Add additional extension for WASM and enable WASM\n  webpackConfig.resolve.extensions.push('.wasm')\n  webpackConfig.experiments = { asyncWebAssembly: true }\n\n  // Exclude the extension from asset/resource\n  const oneOfRule = webpackConfig.module.rules.find((rule) => rule.oneOf)\n    if (!oneOfRule) {\n     throw new Error( `Can't find a 'oneOf' rule under module.rules in the ${context.env} webpack config!`,\n    'webpack+rules+oneOf', )\n  }\n\n  let assetResourceIndex = oneOfRule.oneOf.findIndex(\n    (rule) => rule.type === 'asset/resource',\n  )\n\n  if (!oneOfRule.oneOf[assetResourceIndex].exclude) oneOfRule.oneOf[assetResourceIndex].exclude = []\n  oneOfRule.oneOf[assetResourceIndex].exclude.push (wasmExtensionRegExp)\n\n  // Add the wasm loader\n  const wasmLoader = {\n    test: wasmExtensionRegExp, exclude: /node_modules/, use: [{ loader: 'wasm-loader' }],\n    // Webpack 5 natively supports wasm-loader\n    type: 'webassembly/async',\n  }\n\n  oneOfRule.oneOf.splice(assetResourceIndex, 0, wasmLoader)\n  return webpackConfig\n}\n\nmodule.exports = { overrideWebpackConfig }\n```\n\n3. Tạo file `craco.config.js` với nội dung:\n4. \n```ts\nrequire(\"dotenv-cra\").config();\nconst CracoWasm = require(\"./plugins/craco-wasm\");\nconst CracoSilence = require(\"./plugins/craco-silence\");\nconst CracoCompatibility = require(\"./plugins/craco-compatibility\");\n\nmodule.exports = {\nplugins: [\n  {\n   plugin: CracoCompatibility,\n  },\n  {\n   plugin: CracoWasm,\n  },\n  {\n   plugin: CracoSilence,\n  },\n ],\n};\n```\n\n### Bước 4. Khởi chạy ứng dụng\nSau khi cài đặt cấu hình package + webpack, bạn cần install lại để project cài lại node-module. Hãy chạy dòng lệnh sau:\n\n```shell\nnpm install --force\n```\n\nSau khi install thành công, bạn hãy khởi động ứng dụng bằng câu lệnh sau:\n\n```shell\nnpm start\n```\n\nLúc này, ReactJS sẽ khởi chạy dự án mặc định ở port `3000`, chúng ta có thể mở trình duyệt và truy cập đường dẫn http://localhost:3000.\n\n![](https://lh5.googleusercontent.com/5JcA9mGHU8PxMm6r3wQwGWGuaoKpSt__jebheyKeddPopjkxwANF7IlCoyo4mwH0D2fHFp-p5xjaS7Ku7kkGhS0Rbzuh2GytVDGWVUIOVqjiM49YBxnCVVBi7wfgDHA1slRU11sU)\n\nĐể xây dựng ứng dụng ReactJS đầu tiên, bạn hãy truy cập vào thư mục src trong dự án, tìm đến file src/App.tsx và sửa thành:\n\n```tsx\nimport \"./App.css\";\n\nfunction App() {\n  return <div className=\"App\">Đây là MyApp</div>;\n}\n\nexport default App;\n```\n\nChúng ta sẽ thấy kết quả thay đổi trên giao diện.\n\nLưu ý: Sau khi khởi chạy dự án thành công, nếu bạn sửa đổi các file thì ReactJS sẽ tự động reload các thay đổi đó. Bạn không cần phải khởi động lại server bằng cách thủ công nữa.\n\n![](https://lh5.googleusercontent.com/DRbY4iCBqrY3Mha4W3CJ2w5PDnKkV_OK4jAZe-ENuvmFrFIdxVvI5qerHkExubHlQiU_1jHJz-tBjeFQ5tJVfK_hrvAbEMX5Pr9PZFFlg21JNnGDiXJJoI8LxCAzPUxL9mZ_mOPK)\n\n## Xây dựng giao diện bằng Ant Design\n\nAnt Design (AntD) là thư viện tập hợp các component của React. AntD cung cấp hầu hết các component thông dụng trong ứng dụng web hiện đại như Layout, Button, Icon, DatePicker, vân vân. Bạn có thể tham khảo và học cách sử dụng các component của AntD tại đây: https://ant.design/components/overview/\n\n### Xây dựng ứng dụng đầu tiên\nBước 1. Cập nhật file `src/App.css`\n\n```tsx\n@import \"~antd/dist/antd.css\";\n```\n\nBước 2. Cập nhật file `src/App.tsx`\n\n```tsx\nimport { Button } from \"antd\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\">Button</Button>\n    </div>\n  );\n}\nexport default App;\n```\n\nKhi đã khởi chạy,  ứng dụng ReactJS sẽ tự động cập nhật khi có thay đổi. Đây là kết quả:\n\n  <img style=\"max-width:500px;margin:auto;display:block;\" src=\"https://lh5.googleusercontent.com/9SZrRSToNGn1o8amJibqZ-JdrYuCHUFjlKhdAvUi8iVJnXnBET5OvfdAChn4oAwnBSqaMxv5RXr3ORY5q56tKhX8W5JukjVEdIROPcSKAofuIHsnBlC9RQV0rs5JkCANRZNQRRgu\" alt=\"antd\">\n\nĐoạn code ở file `src/App.tsx` có sử dụng Button được import từ AntD. Đây được gọi là component. Component có thể dễ dàng được tái sử dụng ở bất kì đâu.\n\n```tsx\n<Button type=\"primary\">Button</Button>\n```\n\n**Button** là một component. `type` là `props` mà component nhận vào với giá trị là `primary`.\n\n### Xây dựng component\n\nTiếp theo, chúng ta sẽ xây dựng một component.\n\nBước 1. Tạo file `src/components/walletInfo.tsx`\n\n```tsx\nimport { Col, Row } from \"antd\";\nconst WalletInfo = ({ address, balance }: { address: string; balance: number }) => {\n  return (\n    <Row gutter={[24, 24]}>\n      {/* Wallet address */}\n      <Col span={24}>\n        <Row gutter={[12, 12]}>\n           <Col>Wallet Address:</Col>\n          <Col>{address}</Col>\n         </Row>\n      </Col>\n      {/* Wallet balance */}\n      <Col span={24}>\n       <Row gutter={[12, 12]}>\n          <Col>Balance:</Col>\n          <Col>{balance}</Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default WalletInfo;\n```\n\nComponent Wallet Info sẽ hiển thị thông tin address (địa chỉ) và balance (số dư) của ví. Component này sẽ nhận vào 2 props là: `address` với kiểu dữ liệu `string`, và balance với kiểu dữ liệu `number`. Lưu ý: Trong một component, bạn có thể sử dụng một component khác.\n\nBước 2. Sử dụng component vừa tạo, cập nhật nội dung file `src/App.tsx`\n\n```tsx\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address=\"Đây là wallet address\" balance={0} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        <Button type=\"primary\">Kết nối ví</Button>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nBước 3. Quay lại trang http://localhost:3000 để xem kết quả:\n\n![](https://lh6.googleusercontent.com/mHwVMn0TOObdS8HfpfkQ7T-bJpt_cEtdaRFZCU-TliEJxMacCcyHHECZYov0CIYqH00DGrMhWKG8nSIt90-p774ThR67s_LufIje1KX4QM-HOnM6ENRKTVDA_m-zamIWom8iP8Ll)\n\n\n### Tìm hiểu về State\nState được dùng để lưu trữ trạng thái dữ liệu hiện tại.\n\nĐể hiểu rõ hơn, chúng ta hãy cùng tìm hiểu qua ví dụ sau: Khi click vào button **Kết nối ví**, hành động được thực hiện là lấy địa chỉ ví từ một bên thứ 3, sau đó lưu địa chỉ ví lại để hiển thị lên giao diện (state).\n\nĐể thực thi ví dụ trên, hãy cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useState } from \"react\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // state: wallet address (type = string, default value = '')\n  const [walletAddress, setWalletAddress] = useState<string>(\"\");\n\n  const connectWallet = async () => {\n    // TODO: fetch wallet address\n    const newWalletAddress = \"1234567890\";\n    setWalletAddress(newWalletAddress);\n  };\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={walletAddress} balance={0} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        {walletAddress !== \"\" ? (\n          <Button type=\"primary\" disabled>Đã kết nối</Button>\n        ) : (\n          // Call connectWallet function when click Button\n          <Button type=\"primary\" onClick={connectWallet}>Kết nối ví</Button>\n        )}\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nSau khi đã hoàn thành, bạn hãy quay lại trang http://localhost:3000, click vào button và xem kết quả:\n\n<img width='45%' src=\"https://lh4.googleusercontent.com/YZ_agDioq6sAcKQWZFUEk_Fj19rPF_BpYgkcWhB1SCgfuY0b3yp5-g9ryGWdW1SGqamg02LK7NFUSG1rOZe-27wX8XjvsoasMWyu-9kNYhys_B7kKT0J1dEt-NMHXjW0sD9oejnt\">\n<img width='45%'  src=\"https://lh5.googleusercontent.com/_a1MTOj4G6rmJUki99884BN_aGJJuGqGVvmvv1oN4tEHYb2XCdeNKb27mIKswPRl8T0SaMlURUCuplfOeRUWxQAaejpnWvKXznotCGPSKxlKHpG3TQEEB_MebVKtj-9Ln5Bt1odn\">\n\n\n### Tìm hiểu về UseEffect và UseCallback\n`useEffect` được dùng để quản lý vòng đời của component.\n\n`useEffect` thường được sử dụng để thực hiện một số hành động như: khi khởi tạo component, các giá trị phụ thuộc (được khai báo ở ngoặc vuông cuối hàm, có thể là Props và State) thay đổi. Ngoài ra, UseEffect có thể được sử dụng cho một vài trường hợp khác nhưng mình sẽ không đề cập ở đây.\n\n`useCallback` được sử dụng để tối ưu quá trình render, ngăn hàm bị tạo lại. \n\nĐể hiểu rõ hơn về `useEffect`, chúng ta sẽ cùng đi đến ví dụ tiếp theo: Khi `walletAddress` thay đổi, App tự động lấy `balance` của `walletAddress` đó và cập nhật vào state để hiển thị lên giao diện.\n\nĐể thực thi ví dụ trên, hãy cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // state: wallet address (type = string, default value = '')\n  const [walletAddress, setWalletAddress] = useState<string>(\"\");\n  // state: balance (type = number, default value = 0)\n  const [balance, setBalance] = useState<number>(0);\n\n  const connectWallet = async () => {\n    // TODO: fetch wallet address\n    const newWalletAddress = \"1234567890\";\n    setWalletAddress(newWalletAddress);\n  };\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n    let balance = walletAddress.length;\n    setBalance(balance);\n  }, [walletAddress]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={walletAddress} balance={balance} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        {walletAddress !== \"\" ? (\n          <Button type=\"primary\" disabled>\n            Đã kết nối\n          </Button>\n        ) : (\n        // Call connectWallet function when click Button\n          <Button type=\"primary\" onClick={connectWallet}>\n            Kết nối ví\n          </Button>\n        )}\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nSau khi đã hoàn thành, bạn hãy quay lại trang http://localhost:3000 và xem kết quả:\n\n  <img style=\"margin:auto;display:block;\" src=\"https://lh3.googleusercontent.com/WwLNY6dT7gzoOrX9HJ7yjhrFMXlVfFoi4JcRb5wz2f4cCjQhNjUy_KKRezoJY8mS53lhzthRYBJmJCjoIJCds5h_JBGPz5KJSfK2emzPrdWEhK2436ALQfiwkbnrN6vbSKgvq2TQ\">\n\nVậy là chúng ta đã tìm hiểu qua các khái niệm căn bản, cách tạo và sử dụng Component, Props, State, UseEffect, và UseCallback. Các bạn có thể tham khảo thêm ở trang chủ của ReactJS tại: https://reactjs.org/docs/hooks-intro.html\n\n\n# Các bước tạo và kết nối ví tiền điện tử lên DApp\n## Crypto Wallet (Ví tiền điện tử)\nĐể tham gia sử dụng và phát triển trên mạng lưới blockchain Solana, bạn cần sở hữu một crypto wallet (ví tiền điện tử) để quản lý tiền điện tử. Đó có thể là ví C98, Phantom, hay Slope…\n\nĐể nhận và chuyển tiền, người gửi và người nhận sẽ được định danh bằng **wallet address** (địa chỉ ví).\n\n**PublicKey** là một cách hiển thị khác của Address, tương tự với cách Momo cho phép nhận và chuyển tiền bằng số điện thoại của khách hàng.\n\n**Balance** là số dư của các loại tiền (Token, Coin) hiện có trong ví.\n\n\n## Goki - Hỗ trợ kết nối ví điện tử\n\nCùng sự phát triển của công nghệ, ngày càng nhiều loại ví ra đời phục vụ nhu cầu của người dùng. Goki được xây dựng để giúp developer hỗ trợ nhiều ví nhất trên DApp.\n\nSau đây, chúng ta sẽ học cách cài đặt và kết nối ví Phantom.\n\n\n### Cài đặt ví Phantom\nBước 1: Đầu tiên, bạn hãy tìm tiện ích Phantom trên Chrome tại [Đây](https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa?hl=vi) và chọn “Thêm vào Chrome”.\nBước 2: Bạn hãy chọn Pin để ghim ứng dụng lên góc trên bên trái trang trình duyệt.\n\nBước 3: Giờ chúng ta sẽ tiến hành tạo ví.\n\n* Chọn biểu tượng Phantom trên trình duyệt, bạn sẽ thấy giao diện như hình dưới.\n* Chọn “Create a new wallet” để tạo ví mới.\n\nBước 4: Bạn sẽ được cấp 12 từ khóa. Đây là cụm từ khóa bí mật để khôi phục ví trên thiết bị khác. Hãy nhấn “Copy” để sao chép và lưu lại cụm từ khóa này sang một file khác, hoặc viết ra giấy để lưu giữ.\n\nBước 5: Khi đã lưu trữ cụm từ khoá xong, chọn “I saved my Secret Recovery Phrase” → Continue → Finish. Tới đây, bạn đã tạo thành công ví Phantom cho bản thân rồi đấy!\n\n\n### Kết nối ví Phantom bằng Goki\nBước 1. Cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useWalletKit, useSolana, useConnectedWallet } from \"@gokiprotocol/walletkit\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // State: balance (type = number, default value = 0)\n  const [balance, setBalance] = useState<number>(0);\n\n  // Goki hooks\n  const wallet = useConnectedWallet();\n  const { connect } = useWalletKit();\n  const { disconnect, providerMut } = useSolana();\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n      if (wallet && providerMut) {\n        let balance = await providerMut.connection.getBalance(wallet.publicKey);\n        return setBalance(balance);\n      }      setBalance(0);\n  }, [providerMut, wallet]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={wallet?.publicKey.toBase58() || \"\"} balance={balance} />\n      </Col>\n      {/* Button connect wallet */}\n        <Col span={24} style={{ textAlign: \"center\" }}>\n          {wallet ? (\n            <Button type=\"primary\" onClick={disconnect}>Disconnect\n          </Button>\n        ) : (\n        // Call connectWallet function when click Button\n        <Button type=\"primary\" onClick={connect}>\n          Connect Wallet\n        </Button>\n        )}\n      </Col>\n    </Row>\n . );\n}\nexport default App;\n```\n\nBước 2. Cập nhật `src/index.tsx`\n\n```tsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WalletKitProvider } from \"@gokiprotocol/walletkit\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletKitProvider\n      defaultNetwork=\"devnet\"\n      app={{\n        name: \"My App\",\n      }}\n    >\n      <App />\n    </WalletKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nBước 3. Quay lại trang http://localhost:3000 và click vào Button **Connect Wallet**. Module kết nối ví sẽ hiện lên như hình dưới. Bạn chọn **Continue**, sau đó chọn loại ví đã cài đặt (ở đây là Phantom).\n\nSau khi kết nối ví thành công. Thông tin địa chỉ ví và số dư sẽ tự động được cập nhật.\n\n**Tham khảo project mẫu tại: https://github.com/DescartesNetwork/solana-academy/tree/init-dapp-ui**\n\n<br/><button data-tf-popup=\"GlrLQzlL\" data-tf-iframe-props=\"title=[Vietnam Web3 Camp] Bài tập số 2\" data-tf-medium=\"snippet\" style=\"all:unset;font-family:Helvetica,Arial,sans-serif;display:inline-block;max-width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;background-color:#F9575E;color:#FFFFFF;font-size:20px;border-radius:12px;padding:0 33px;font-weight:bold;height:50px;cursor:pointer;line-height:50px;text-align:center;margin:0;text-decoration:none;margin:auto;display:block;\">Làm bài tập</button>",
    "title": "Thiết kế giao diện DApp"
  },
  "vn": {
    "contents": "Ấn tượng đầu tiên luôn là quan trọng nhất. Để xây dựng một DApp hoàn chỉnh, được nhiều người dùng lựa chọn sử dụng, bạn cần chú ý tới “bộ mặt” - giao diện của DApp.\nVậy, làm thế nào để thiết kế giao diện cơ bản cho DApp? Hãy cùng tìm hiểu về ReactJS và Ant Design - các thư viện UI đang được những ứng dụng toàn cầu như Facebook, Shopee, Lazada,… sử dụng cho giao diện của họ.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://www.youtube.com/embed/hxk9-Pyxm2M?list=PLTYZbOVtStqGySBwPhVL07iRH3H7ZOsag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n# Xây dựng giao diện bằng ReactJS\nHiện nay, hầu hết lập trình viên Frontend đều biết đến hoặc đã từng nghe qua về ReactJS. ReactJS là một thư viện Javascript được phát triển tại Facebook nhằm tăng tốc và giảm bug trong quá trình xây dựng giao diện, đồng thời giúp việc phát triển và bảo trì mã nguồn trở nên dễ dàng hơn.\n\n## Các khái niệm cơ bản\nTrước khi học cách sử dụng ReactJS, bạn cần nắm một số khái niệm cơ bản gồm:\n\n* Virtual DOM: Ở DOM tree truyền thống, khi một node thay đổi, toàn bộ node sẽ tái cấu trúc. Như vậy đồng nghĩa với việc DOM tree cũng sẽ phải thay đổi một phần, điều này sẽ ảnh hưởng đến tốc độ xử lý. ReactJS sử dụng Virtual DOM (DOM ảo) để cải thiện vấn đề này. Công nghệ DOM ảo giúp tăng hiệu năng cho ứng dụng bằng cách tính toán tối ưu hoá việc re-render DOM tree thật khi dữ liệu thay đổi.\n* JSX: Một dạng ngôn ngữ cho phép viết các mã HTML trong Javascript.\n* Components: ReactJS được xây dựng xung quanh các component, chúng ta có thể tái sử dụng component ở nhiều nơi. Việc này giúp dễ dàng bảo trì mã code. \n* Props: Input của Component nhận gọi là props, props được truyền vào và không thể thay đổi.\n* State: thể hiện trạng thái của component, khi state thay đổi bằng các phương thức setState thì component đồng thời render lại để cập nhật UI.\n\n## Các bước cài đặt và khởi chạy ReactJS\n\n### Bước 1. Cài đặt NodeJS và NPM\n\nĐể cài đặt môi trường chạy ReactJS, trước tiên bạn phải cài đặt NodeJS và NPM - đây là nền tảng bắt buộc.\n\n1. Truy cập https://nodejs.org/en/download/, chọn và tải phiên bản phù hợp với hệ điều hành của bạn. Tiến hành cài đặt theo mặc định.\n![](https://lh6.googleusercontent.com/aSOxskWyHXgt-t8XNzoPIbOXm2xn3JKPZeKSVSzbBHfdCN-TKAa8cWrsRRWTmu2x7smxwYXymUXoxC4nALL6UeAqutKyCSrkrlBBkCH2eeZzQnoGEFn0tQUlYWsEibrabQcEqhIG)\n\n\n2. Hãy kiểm tra lại phiên bản để xác nhận đã cài thành công bằng cách mở Terminal và gõ dòng lệnh sau:\n\n```shell\nnode -v\nv14.17.4\nnpm -v\n6.14.14\n```\n\nTham khảo thêm tại:\n \n* https://create-react-app.dev/docs/getting-started\n* https://create-react-app.dev/docs/adding-typescript/\n\n### Bước 2. Khởi tạo ReactJS App\n\nĐể khởi tạo một dự án sử dụng ReactJS vào trong thư mục chứa dự án, bạn hãy mở Terminal và gõ dòng lệnh sau:\n\n```shell\nnpx create-react-app my-app --template typescript\ncd my-app\n```\n\nTrong đó, `my-app` là tên thư mục chứa dự án của bạn.\n\n### Bước 3. Cài đặt package + webpack\n1. Cập nhật nội dung file `package.json` như sau:\n\n```json\n{\n  \"name\": \"my-app\",\n  \"dependencies\": {\n  \"@emotion/react\": \"^11.8.1\",\n  \"@emotion/styled\": \"^11.8.1\",\n  \"@saberhq/use-solana\": \"^1.12.48\",\n  \"@gokiprotocol/walletkit\": \"^1.6.4\",\n  \"@reduxjs/toolkit\": \"^1.7.2\",\n  \"@solana/buffer-layout\": \"^4.0.0\",\n  \"antd\": \"^4.18.2\",\n  \"react\": \"^17.0.2\",\n  \"react-dom\": \"^17.0.2\",\n  \"react-router-dom\": \"^5.3.0\",\n  \"web-vitals\": \"^2.1.4\",\n  \"@testing-library/jest-dom\": \"^5.16.3\",\n  \"@testing-library/react\": \"^12.1.4\",\n  \"@testing-library/user-event\": \"^13.5.0\",\n  \"@types/jest\": \"^27.4.1\"\n},\n\"scripts\": {\n  \"start\": \"craco start\",\n  \"build\": \"craco build\",\n  \"test\": \"craco test\"\n},\n\"browserslist\": {\n  \"production\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not op_mini all\"\n  ],\n  \"development\": [\n    \"last 1 chrome version\",\n    \"last 1 firefox version\",\n    \"last 1 safari version\"\n  ]\n},\n\"devDependencies\": {\n  \"@craco/craco\": \"^6.4.0\",\n  \"@types/node\": \"^16.11.26\",\n  \"@types/react\": \"^17.0.39\",\n  \"@types/react-dom\": \"^17.0.11\",\n  \"@types/react-router-dom\": \"^5.3.3\",\n  \"assert\": \"^2.0.0\",\n  \"dotenv-cra\": \"^3.0.2\",\n  \"gh-pages\": \"^3.2.3\",\n  \"less\": \"^4.1.2\",\n  \"less-loader\": \"^10.2.0\",\n  \"react-scripts\": \"^5.0.0\",\n  \"typescript\": \"^4.5.2\"\n  }\n}\n```\n\n2. Tạo folder plugins và tạo mới 3 file với nội dung như sau:\n\n*plugins/craco-compatibility.js*\n\n```ts\n/**\n* Maintain Webpack 5 compatibility\n*/\nconst path = require('path')\nconst webpack = require('webpack')\n\nconst overrideWebpackConfig = ({ context, webpackConfig }) => {\n // Add buffer to Webpack 5 polyfill\n // https://github.com/diegomura/react-pdf/issues/1029\n webpackConfig.plugins.push(\n   new webpack.ProvidePlugin({\n     Buffer: ['buffer', 'Buffer'],\n   }),\n )\n // Add polyfill libraries\n webpackConfig.resolve.fallback = {\n   // For Ethereum Web3\n   assert: require.resolve('assert/'),\n }\n\n // Fix unrecognized change / caching problem\n webpackConfig.cache.buildDependencies.config.push(\n   path.join(context.paths.appPath, './craco.config.js'),\n )\n // Fix \"fully specified\"\n // https://github.com/webpack/webpack/issues/11467#issuecomment-808618999/\n webpackConfig.module.rules.push({\n   test: /\\.m?js/,\n   resolve: {\n     fullySpecified: false,\n   },\n })\n return webpackConfig\n}\n\nmodule.exports = { overrideWebpackConfig }\n```\n\n*plugins/craco-silence.js*\n\n```ts\n/**\n* Disable warnings & Minimal logs\n*/\n\nconst path = require('path')\nconst overrideWebpackConfig = ({ context, webpackConfig, pluginOptions }) => {\n  // Disable verbose stat\n  webpackConfig.stats = 'errors-only'// Disable \"Failed to parse source map\"\n  const pathSep = path.sep\n\n  webpackConfig.module.rules.forEach((rule) => {\n    if (rule.loader?.includes(`${pathSep}source-map-loader${pathSep}`)) {\n      const { exclude } = rule\n      if (typeof exclude === 'array') exclude.push(/node_modules/)\n      else rule.exclude = [exclude, /node_modules/]\n    }\n  })\n  return webpackConfig\n}\n\nconst overrideDevServerConfig = ({\n  devServerConfig,\n  cracoConfig,\n  pluginOptions,\n  context,\n}) => {\n  devServerConfig.client.overlay = {\n    warnings: false,\n    errors: true,\n  }\n  return devServerConfig\n}\n\nmodule.exports = { overrideWebpackConfig, overrideDevServerConfig }\n```\n        \n*plugin/scraco-wasm.js*\n\n```ts\n/**\n* WebAssembly loader for Webpack 5\n*/\nconst overrideWebpackConfig = ({ context, webpackConfig, pluginOptions }) => {\n  const wasmExtensionRegExp = /\\.wasm$/\n\n  // Add additional extension for WASM and enable WASM\n  webpackConfig.resolve.extensions.push('.wasm')\n  webpackConfig.experiments = { asyncWebAssembly: true }\n\n  // Exclude the extension from asset/resource\n  const oneOfRule = webpackConfig.module.rules.find((rule) => rule.oneOf)\n    if (!oneOfRule) {\n     throw new Error( `Can't find a 'oneOf' rule under module.rules in the ${context.env} webpack config!`,\n    'webpack+rules+oneOf', )\n  }\n\n  let assetResourceIndex = oneOfRule.oneOf.findIndex(\n    (rule) => rule.type === 'asset/resource',\n  )\n\n  if (!oneOfRule.oneOf[assetResourceIndex].exclude) oneOfRule.oneOf[assetResourceIndex].exclude = []\n  oneOfRule.oneOf[assetResourceIndex].exclude.push (wasmExtensionRegExp)\n\n  // Add the wasm loader\n  const wasmLoader = {\n    test: wasmExtensionRegExp, exclude: /node_modules/, use: [{ loader: 'wasm-loader' }],\n    // Webpack 5 natively supports wasm-loader\n    type: 'webassembly/async',\n  }\n\n  oneOfRule.oneOf.splice(assetResourceIndex, 0, wasmLoader)\n  return webpackConfig\n}\n\nmodule.exports = { overrideWebpackConfig }\n```\n\n3. Tạo file `craco.config.js` với nội dung:\n4. \n```ts\nrequire(\"dotenv-cra\").config();\nconst CracoWasm = require(\"./plugins/craco-wasm\");\nconst CracoSilence = require(\"./plugins/craco-silence\");\nconst CracoCompatibility = require(\"./plugins/craco-compatibility\");\n\nmodule.exports = {\nplugins: [\n  {\n   plugin: CracoCompatibility,\n  },\n  {\n   plugin: CracoWasm,\n  },\n  {\n   plugin: CracoSilence,\n  },\n ],\n};\n```\n\n### Bước 4. Khởi chạy ứng dụng\nSau khi cài đặt cấu hình package + webpack, bạn cần install lại để project cài lại node-module. Hãy chạy dòng lệnh sau:\n\n```shell\nnpm install --force\n```\n\nSau khi install thành công, bạn hãy khởi động ứng dụng bằng câu lệnh sau:\n\n```shell\nnpm start\n```\n\nLúc này, ReactJS sẽ khởi chạy dự án mặc định ở port `3000`, chúng ta có thể mở trình duyệt và truy cập đường dẫn http://localhost:3000.\n\n![](https://lh5.googleusercontent.com/5JcA9mGHU8PxMm6r3wQwGWGuaoKpSt__jebheyKeddPopjkxwANF7IlCoyo4mwH0D2fHFp-p5xjaS7Ku7kkGhS0Rbzuh2GytVDGWVUIOVqjiM49YBxnCVVBi7wfgDHA1slRU11sU)\n\nĐể xây dựng ứng dụng ReactJS đầu tiên, bạn hãy truy cập vào thư mục src trong dự án, tìm đến file src/App.tsx và sửa thành:\n\n```tsx\nimport \"./App.css\";\n\nfunction App() {\n  return <div className=\"App\">Đây là MyApp</div>;\n}\n\nexport default App;\n```\n\nChúng ta sẽ thấy kết quả thay đổi trên giao diện.\n\nLưu ý: Sau khi khởi chạy dự án thành công, nếu bạn sửa đổi các file thì ReactJS sẽ tự động reload các thay đổi đó. Bạn không cần phải khởi động lại server bằng cách thủ công nữa.\n\n![](https://lh5.googleusercontent.com/DRbY4iCBqrY3Mha4W3CJ2w5PDnKkV_OK4jAZe-ENuvmFrFIdxVvI5qerHkExubHlQiU_1jHJz-tBjeFQ5tJVfK_hrvAbEMX5Pr9PZFFlg21JNnGDiXJJoI8LxCAzPUxL9mZ_mOPK)\n\n## Xây dựng giao diện bằng Ant Design\n\nAnt Design (AntD) là thư viện tập hợp các component của React. AntD cung cấp hầu hết các component thông dụng trong ứng dụng web hiện đại như Layout, Button, Icon, DatePicker, vân vân. Bạn có thể tham khảo và học cách sử dụng các component của AntD tại đây: https://ant.design/components/overview/\n\n### Xây dựng ứng dụng đầu tiên\nBước 1. Cập nhật file `src/App.css`\n\n```tsx\n@import \"~antd/dist/antd.css\";\n```\n\nBước 2. Cập nhật file `src/App.tsx`\n\n```tsx\nimport { Button } from \"antd\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\">Button</Button>\n    </div>\n  );\n}\nexport default App;\n```\n\nKhi đã khởi chạy,  ứng dụng ReactJS sẽ tự động cập nhật khi có thay đổi. Đây là kết quả:\n\n  <img style=\"max-width:500px;margin:auto;display:block;\" src=\"https://lh5.googleusercontent.com/9SZrRSToNGn1o8amJibqZ-JdrYuCHUFjlKhdAvUi8iVJnXnBET5OvfdAChn4oAwnBSqaMxv5RXr3ORY5q56tKhX8W5JukjVEdIROPcSKAofuIHsnBlC9RQV0rs5JkCANRZNQRRgu\" alt=\"antd\">\n\nĐoạn code ở file `src/App.tsx` có sử dụng Button được import từ AntD. Đây được gọi là component. Component có thể dễ dàng được tái sử dụng ở bất kì đâu.\n\n```tsx\n<Button type=\"primary\">Button</Button>\n```\n\n**Button** là một component. `type` là `props` mà component nhận vào với giá trị là `primary`.\n\n### Xây dựng component\n\nTiếp theo, chúng ta sẽ xây dựng một component.\n\nBước 1. Tạo file `src/components/walletInfo.tsx`\n\n```tsx\nimport { Col, Row } from \"antd\";\nconst WalletInfo = ({ address, balance }: { address: string; balance: number }) => {\n  return (\n    <Row gutter={[24, 24]}>\n      {/* Wallet address */}\n      <Col span={24}>\n        <Row gutter={[12, 12]}>\n           <Col>Wallet Address:</Col>\n          <Col>{address}</Col>\n         </Row>\n      </Col>\n      {/* Wallet balance */}\n      <Col span={24}>\n       <Row gutter={[12, 12]}>\n          <Col>Balance:</Col>\n          <Col>{balance}</Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default WalletInfo;\n```\n\nComponent Wallet Info sẽ hiển thị thông tin address (địa chỉ) và balance (số dư) của ví. Component này sẽ nhận vào 2 props là: `address` với kiểu dữ liệu `string`, và balance với kiểu dữ liệu `number`. Lưu ý: Trong một component, bạn có thể sử dụng một component khác.\n\nBước 2. Sử dụng component vừa tạo, cập nhật nội dung file `src/App.tsx`\n\n```tsx\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address=\"Đây là wallet address\" balance={0} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        <Button type=\"primary\">Kết nối ví</Button>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nBước 3. Quay lại trang http://localhost:3000 để xem kết quả:\n\n![](https://lh6.googleusercontent.com/mHwVMn0TOObdS8HfpfkQ7T-bJpt_cEtdaRFZCU-TliEJxMacCcyHHECZYov0CIYqH00DGrMhWKG8nSIt90-p774ThR67s_LufIje1KX4QM-HOnM6ENRKTVDA_m-zamIWom8iP8Ll)\n\n\n### Tìm hiểu về State\nState được dùng để lưu trữ trạng thái dữ liệu hiện tại.\n\nĐể hiểu rõ hơn, chúng ta hãy cùng tìm hiểu qua ví dụ sau: Khi click vào button **Kết nối ví**, hành động được thực hiện là lấy địa chỉ ví từ một bên thứ 3, sau đó lưu địa chỉ ví lại để hiển thị lên giao diện (state).\n\nĐể thực thi ví dụ trên, hãy cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useState } from \"react\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // state: wallet address (type = string, default value = '')\n  const [walletAddress, setWalletAddress] = useState<string>(\"\");\n\n  const connectWallet = async () => {\n    // TODO: fetch wallet address\n    const newWalletAddress = \"1234567890\";\n    setWalletAddress(newWalletAddress);\n  };\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={walletAddress} balance={0} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        {walletAddress !== \"\" ? (\n          <Button type=\"primary\" disabled>Đã kết nối</Button>\n        ) : (\n          // Call connectWallet function when click Button\n          <Button type=\"primary\" onClick={connectWallet}>Kết nối ví</Button>\n        )}\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nSau khi đã hoàn thành, bạn hãy quay lại trang http://localhost:3000, click vào button và xem kết quả:\n\n<img width='45%' src=\"https://lh4.googleusercontent.com/YZ_agDioq6sAcKQWZFUEk_Fj19rPF_BpYgkcWhB1SCgfuY0b3yp5-g9ryGWdW1SGqamg02LK7NFUSG1rOZe-27wX8XjvsoasMWyu-9kNYhys_B7kKT0J1dEt-NMHXjW0sD9oejnt\">\n<img width='45%'  src=\"https://lh5.googleusercontent.com/_a1MTOj4G6rmJUki99884BN_aGJJuGqGVvmvv1oN4tEHYb2XCdeNKb27mIKswPRl8T0SaMlURUCuplfOeRUWxQAaejpnWvKXznotCGPSKxlKHpG3TQEEB_MebVKtj-9Ln5Bt1odn\">\n\n\n### Tìm hiểu về UseEffect và UseCallback\n`useEffect` được dùng để quản lý vòng đời của component.\n\n`useEffect` thường được sử dụng để thực hiện một số hành động như: khi khởi tạo component, các giá trị phụ thuộc (được khai báo ở ngoặc vuông cuối hàm, có thể là Props và State) thay đổi. Ngoài ra, UseEffect có thể được sử dụng cho một vài trường hợp khác nhưng mình sẽ không đề cập ở đây.\n\n`useCallback` được sử dụng để tối ưu quá trình render, ngăn hàm bị tạo lại. \n\nĐể hiểu rõ hơn về `useEffect`, chúng ta sẽ cùng đi đến ví dụ tiếp theo: Khi `walletAddress` thay đổi, App tự động lấy `balance` của `walletAddress` đó và cập nhật vào state để hiển thị lên giao diện.\n\nĐể thực thi ví dụ trên, hãy cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // state: wallet address (type = string, default value = '')\n  const [walletAddress, setWalletAddress] = useState<string>(\"\");\n  // state: balance (type = number, default value = 0)\n  const [balance, setBalance] = useState<number>(0);\n\n  const connectWallet = async () => {\n    // TODO: fetch wallet address\n    const newWalletAddress = \"1234567890\";\n    setWalletAddress(newWalletAddress);\n  };\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n    let balance = walletAddress.length;\n    setBalance(balance);\n  }, [walletAddress]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={walletAddress} balance={balance} />\n      </Col>\n      {/* Button connect wallet */}\n      <Col span={24} style={{ textAlign: \"center\" }}>\n        {walletAddress !== \"\" ? (\n          <Button type=\"primary\" disabled>\n            Đã kết nối\n          </Button>\n        ) : (\n        // Call connectWallet function when click Button\n          <Button type=\"primary\" onClick={connectWallet}>\n            Kết nối ví\n          </Button>\n        )}\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nSau khi đã hoàn thành, bạn hãy quay lại trang http://localhost:3000 và xem kết quả:\n\n  <img style=\"margin:auto;display:block;\" src=\"https://lh3.googleusercontent.com/WwLNY6dT7gzoOrX9HJ7yjhrFMXlVfFoi4JcRb5wz2f4cCjQhNjUy_KKRezoJY8mS53lhzthRYBJmJCjoIJCds5h_JBGPz5KJSfK2emzPrdWEhK2436ALQfiwkbnrN6vbSKgvq2TQ\">\n\nVậy là chúng ta đã tìm hiểu qua các khái niệm căn bản, cách tạo và sử dụng Component, Props, State, UseEffect, và UseCallback. Các bạn có thể tham khảo thêm ở trang chủ của ReactJS tại: https://reactjs.org/docs/hooks-intro.html\n\n\n# Các bước tạo và kết nối ví tiền điện tử lên DApp\n## Crypto Wallet (Ví tiền điện tử)\nĐể tham gia sử dụng và phát triển trên mạng lưới blockchain Solana, bạn cần sở hữu một crypto wallet (ví tiền điện tử) để quản lý tiền điện tử. Đó có thể là ví C98, Phantom, hay Slope…\n\nĐể nhận và chuyển tiền, người gửi và người nhận sẽ được định danh bằng **wallet address** (địa chỉ ví).\n\n**PublicKey** là một cách hiển thị khác của Address, tương tự với cách Momo cho phép nhận và chuyển tiền bằng số điện thoại của khách hàng.\n\n**Balance** là số dư của các loại tiền (Token, Coin) hiện có trong ví.\n\n\n## Goki - Hỗ trợ kết nối ví điện tử\n\nCùng sự phát triển của công nghệ, ngày càng nhiều loại ví ra đời phục vụ nhu cầu của người dùng. Goki được xây dựng để giúp developer hỗ trợ nhiều ví nhất trên DApp.\n\nSau đây, chúng ta sẽ học cách cài đặt và kết nối ví Phantom.\n\n\n### Cài đặt ví Phantom\nBước 1: Đầu tiên, bạn hãy tìm tiện ích Phantom trên Chrome tại [Đây](https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa?hl=vi) và chọn “Thêm vào Chrome”.\nBước 2: Bạn hãy chọn Pin để ghim ứng dụng lên góc trên bên trái trang trình duyệt.\n\nBước 3: Giờ chúng ta sẽ tiến hành tạo ví.\n\n* Chọn biểu tượng Phantom trên trình duyệt, bạn sẽ thấy giao diện như hình dưới.\n* Chọn “Create a new wallet” để tạo ví mới.\n\nBước 4: Bạn sẽ được cấp 12 từ khóa. Đây là cụm từ khóa bí mật để khôi phục ví trên thiết bị khác. Hãy nhấn “Copy” để sao chép và lưu lại cụm từ khóa này sang một file khác, hoặc viết ra giấy để lưu giữ.\n\nBước 5: Khi đã lưu trữ cụm từ khoá xong, chọn “I saved my Secret Recovery Phrase” → Continue → Finish. Tới đây, bạn đã tạo thành công ví Phantom cho bản thân rồi đấy!\n\n\n### Kết nối ví Phantom bằng Goki\nBước 1. Cập nhật file `src/App.tsx` như sau:\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useWalletKit, useSolana, useConnectedWallet } from \"@gokiprotocol/walletkit\";\n\nimport { Button, Col, Row } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // State: balance (type = number, default value = 0)\n  const [balance, setBalance] = useState<number>(0);\n\n  // Goki hooks\n  const wallet = useConnectedWallet();\n  const { connect } = useWalletKit();\n  const { disconnect, providerMut } = useSolana();\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n      if (wallet && providerMut) {\n        let balance = await providerMut.connection.getBalance(wallet.publicKey);\n        return setBalance(balance);\n      }      setBalance(0);\n  }, [providerMut, wallet]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\">\n      <Col>\n        <WalletInfo address={wallet?.publicKey.toBase58() || \"\"} balance={balance} />\n      </Col>\n      {/* Button connect wallet */}\n        <Col span={24} style={{ textAlign: \"center\" }}>\n          {wallet ? (\n            <Button type=\"primary\" onClick={disconnect}>Disconnect\n          </Button>\n        ) : (\n        // Call connectWallet function when click Button\n        <Button type=\"primary\" onClick={connect}>\n          Connect Wallet\n        </Button>\n        )}\n      </Col>\n    </Row>\n . );\n}\nexport default App;\n```\n\nBước 2. Cập nhật `src/index.tsx`\n\n```tsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WalletKitProvider } from \"@gokiprotocol/walletkit\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletKitProvider\n      defaultNetwork=\"devnet\"\n      app={{\n        name: \"My App\",\n      }}\n    >\n      <App />\n    </WalletKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nBước 3. Quay lại trang http://localhost:3000 và click vào Button **Connect Wallet**. Module kết nối ví sẽ hiện lên như hình dưới. Bạn chọn **Continue**, sau đó chọn loại ví đã cài đặt (ở đây là Phantom).\n\nSau khi kết nối ví thành công. Thông tin địa chỉ ví và số dư sẽ tự động được cập nhật.\n\n**Tham khảo project mẫu tại: https://github.com/DescartesNetwork/solana-academy/tree/init-dapp-ui**\n\n<br/><button data-tf-popup=\"GlrLQzlL\" data-tf-iframe-props=\"title=[Vietnam Web3 Camp] Bài tập số 2\" data-tf-medium=\"snippet\" style=\"all:unset;font-family:Helvetica,Arial,sans-serif;display:inline-block;max-width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;background-color:#F9575E;color:#FFFFFF;font-size:20px;border-radius:12px;padding:0 33px;font-weight:bold;height:50px;cursor:pointer;line-height:50px;text-align:center;margin:0;text-decoration:none;margin:auto;display:block;\">Làm bài tập</button>",
    "title": "Thiết kế giao diện DApp"
  },
  "id": "10791406528"
}