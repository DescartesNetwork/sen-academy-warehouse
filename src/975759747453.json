{
  "createdAt": 1652342850656,
  "updatedAt": 1652839532578,
  "thumbnail": "https://i.imgur.com/CV57h1M.png",
  "category": [
    "dev",
    "blockchain",
    "solana",
    "web3camp"
  ],
  "en": {
    "contents": "Sau khi đã thiết kế giao diện và kết nối ví điện tử trên DApp của mình (tham khảo bài 2: [Thiết kế giao diện DApp](https://academy.sentre.io/#/blogs/design-dapp-ui?category=dev)), bạn sẽ cần phải quản lý các dữ liệu liên quan tới DApp đó như: Wallet, Account, Balance, vân vân. Công cụ giúp bạn làm được việc này chính là Redux.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://www.youtube.com/embed/XBagOm8tJ-Q?list=PLTYZbOVtStqGySBwPhVL07iRH3H7ZOsag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Redux là gì?\nRedux là một thư viện Javascript để quản lý state của ứng dụng, thường được sử dụng chung với ReactJS. Redux Toolkit là một thư viện giúp lập trình viên viết Redux dễ dàng và đơn giản hơn.\n\nỞ bài viết này, chúng ta sẽ cùng tìm hiểu nhanh về redux-toolkit và ứng dụng nhanh vào project của mình với một ví dụ đơn giản là tăng hoặc giảm một biến đếm counter.\n\n<img style=\"maxWidth:512px;display:block;margin:auto;\" alt=\"redux\" src=\"https://i.2kvn.com/img/vib-2021-3eca7a19-82be-4c9f-8bfc-cbeac838106b.png\" />\n\n## Cài đặt Redux Toolkit và React-Redux\n\n### Bước 1. Mở Terminal và nhập lệnh\n\n```shell\n# NPM\nnpm install @reduxjs/toolkit react-redux\n```\n\n### Bước 2. Khởi tạo store\n\n* Store là 1 object chứa tất cả state toàn cục của ứng dụng.\n* Redux-toolkit: sử dụng configureStore để tạo store.\n* Tạo một tệp có tên src/store/index.ts. Import API configStore từ Redux-toolkit. Chúng ta sẽ bắt đầu bằng cách tạo Redux store trống và export nó, sau đó định nghĩa App State và Dispatch Types​ để tham chiếu khi cần sử dụng.\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {},\n})\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n```\n\n### Bước 3. Cung cấp Redux Store vào React App\n\nSau khi store được tạo, ở src/index.tsx, ta wrap `<App/>` bên trong một component hỗ trợ của react-redux là Provider. Nhờ đó tất cả component trong `<App/>` có thể truy cập được store.\n\nFile: `src/index.tsx`\n\n```ts\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById(\"root\")\n```\n\n### Bước 4. Tạo Redux State Slice\n\n* Tạo một file mới đặt tên `src/store/counter.reducer.ts`\n* File này import createSlice API từ Redux-toolkit. Redux-toolkit được sử dụng nhằm kết hợp giữa `actions` và `reducers` lại với nhau. Đó chính là nhiệm vụ của `slice`, được thực thi bằng hàm `createSlice`.\n\nFile: `src/store/counter.reducer.ts`\n\n```ts\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n\n  // 'createSlice' will infer the state type from the 'initialState' argument initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  }\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;\n```\n        \n### Bước 5. Thêm Slice Reducers vào Store\n\n* Chúng ta cần `import counterReducer` từ `./counter.reducer` đã được tạo ở trên và thêm nó vào `store`.\n* Bằng việc định nghĩa `field` bên trong biến `reducer`, chúng ta đã nói với `store` là hãy dùng các các hàm trong `reducer` để xử lý các cập nhật của `state` đó.\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter.reducer\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {counter: counterState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\n### Bước 6. Sử dụng redux tại component\n\nỞ `src/components/counter/index.tsx` ta sẽ:\n* Sử dụng `useSelector` của react-redux để lấy `counter` từ `store`.\n* Sử dụng `useDispatch` để trả về hàm dispatch, truyền `increment` và `decrement` vào `dispatch` để gọi 2 `action` này.\n\nFile: `src/components/counter/index.tsx`\n\n```ts\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState, AppDispatch } from \"store\";\nimport { increment, decrement } from \"store/counter.reducer\";\n\nconst Counter = () => {\n  const count = useSelector((state: AppState) => state.counter.value);\n  const dispatch = useDispatch<AppDispatch>();\n\n  return (\n    <div>\n      <div>Counter</div>\n      <button onClick={() => dispatch(increment())}>Increase Counter</button>\n      <button onClick={() => dispatch(decrement())}>Decrease Counter</button>\n      <p>Counter value: {count}</p>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\n## Ứng dụng vào project: Tạo Wallet Reducer\nBước 1. Cài đặt React-Redux và Redux Toolkit\n\nBước 2. Khởi tạo store\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nexport const store = configureStore({\n  reducer: {}\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {wallet: WalletState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\nBước 3. Cung cấp Redux Store vào React App\n\nFile: `src/index.tsx`\n\n```ts\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { WalletKitProvider } from \"@gokiprotocol/walletkit\";\n\nimport App from \"./App\";\nimport { store } from \"store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n     <WalletKitProvider\n        defaultNetwork=\"devnet\"\n        app={{\n          name: \"My App\"\n        }}\n      >\n        <App />\n      </WalletKitProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nBước 4. Tạo Redux State Slice\n\nFile: `src/store/wallet.reducer.ts`\n\n```ts\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface WalletState {\n  walletAddress: string;\n  balance: number;\n}\n\n// Define the initial state using that type\nconst initialState: WalletState = {\n  walletAddress: \"\",\n  balance: 0\n};\n\nexport const walletSlice = createSlice({\n  name: \"wallet\",\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of 'action.payload'\n    setWalletInfo: (state, action: PayloadAction<WalletState>) => {\n    state.walletAddress = action.payload.walletAddress;\n    state.balance = action.payload.balance;\n    }\n  }\n});\n\nexport const { setWalletInfo } = walletSlice.actions;\nexport default walletSlice.reducer;\n```\n\nBước 5. Thêm Slice Reducers vào Store\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport walletReducer from \"store/wallet.reducer\";\n\nexport const store = configureStore({\n  reducer: {\n    wallet: walletReducer\n  }\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {wallet: WalletState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\nBước 6. Sử dụng redux tại component\n\nFile: `src/App.tsx`\n\n```tsx\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  useWalletKit,\n  useSolana,\n  useConnectedWallet\n} from \"@gokiprotocol/walletkit\";\n\nimport { Button, Col, Row, Space } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\nimport Transfer from \"components/transfer\";\n\nimport { AppDispatch } from \"store\";\nimport { setWalletInfo, WalletState } from \"store/wallet.reducer\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // Goki hooks\n  const wallet = useConnectedWallet();\n  const { connect } = useWalletKit();\n  const { disconnect, providerMut } = useSolana();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n    let walletInfo: WalletState = {\n      walletAddress: wallet?.publicKey.toBase58() || \"\",\n      balance: 0\n    };\n    if (wallet && providerMut) {\n      walletInfo.balance = await providerMut.connection.getBalance(\n        wallet.publicKey\n      );\n    }\n    dispatch(setWalletInfo(walletInfo));\n  }, [providerMut, wallet]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\" gutter={[24, 24]}>\n      <Col span={12}>\n        <Row gutter={[24, 24]}>\n          <Col span={24} style={{ paddingTop: \"50px\" }}>\n            <WalletInfo />\n          </Col>\n          {/* Button connect wallet */}\n          <Col span={24} style={{ textAlign: \"center\" }}>\n            {wallet ? (\n              <Space>\n                <Button type=\"primary\" onClick={disconnect}>Disconnect</Button>\n                <Button type=\"primary\" onClick={fetchBalance}>Update Wallet</Button>\n              </Space>\n            ) : (\n              // Call connectWallet function when click Button\n              <Button type=\"primary\" onClick={connect}>Connect Wallet</Button>\n            )}\n          </Col>\n          <Col span={24}>\n            <Transfer />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nĐây sẽ là giao diện khi chưa kết nối ví:\n\n![wallet](https://lh6.googleusercontent.com/N-SnZT6RfJ9DI-u6qaizJNatyyYmDeQo67jRRU6sP_-y2ctsa2CTFVmBJmRunTkUqLdGeAENA2-WGI_HKWqy9whWcXRO8-rBE4iOC_AVosGe2GQCebyFjkW-9-D5qNUwEcFL4NFT)\n\nĐây là giao diện khi kết nối ví:\n\n![wallet](https://lh6.googleusercontent.com/s7L8itiKGyjsXni2P7jHcZxsZPlsXH9pOD_bhhELOoIAj7Czc9BSOitUXk0K-kdYFEnl14rTsqeFd_G4g0w_uPHEZ5ke0X1cIvaqvOmwdb5-z5gCqmtaMXK8y8nnBFeGfKkN2USw)\n\nVà đây là giao diện khi đã kết nối ví thành công:\n\n![](https://lh3.googleusercontent.com/zBXV_e1YLqzQvsWY0CcBY7iminzkgukLN1j6bNk5y5MjQ7cjOr1qUJD73oymISV-9CtLWQu2SyHsOsPdzhn4FGX7vZDxbQqnH-XyNfKohmmimi9W_h6zXSWuqeSTaCOxNVHX7XSq)\n\nDữ liệu wallet sẽ được lưu ở global store. Bất cứ `component` nào (ví dụ như `Transfer`) cần sử dụng đến dữ liệu này sẽ có thể truy cập để sử dụng, cũng như được cập nhật mới data khi `store` thay đổi.\n\n<br/><button data-tf-popup=\"Yk3yreLD\" data-tf-iframe-props=\"title=[Vietnam Web3 Camp] Bài tập số 3\" data-tf-medium=\"snippet\" style=\"all:unset;font-family:Helvetica,Arial,sans-serif;display:inline-block;max-width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;background-color:#F9575E;color:#FFFFFF;font-size:20px;border-radius:12px;padding:0 33px;font-weight:bold;height:50px;cursor:pointer;line-height:50px;text-align:center;margin:0;text-decoration:none;margin:auto;display:block;\">Làm bài tập</button><script src=\"//embed.typeform.com/next/embed.js\"></script>",
    "title": "Quản lý State của Dapp"
  },
  "vn": {
    "contents": "Sau khi đã thiết kế giao diện và kết nối ví điện tử trên DApp của mình (tham khảo bài 2: [Thiết kế giao diện DApp](https://academy.sentre.io/#/blogs/design-dapp-ui?category=dev)), bạn sẽ cần phải quản lý các dữ liệu liên quan tới DApp đó như: Wallet, Account, Balance, vân vân. Công cụ giúp bạn làm được việc này chính là Redux.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://www.youtube.com/embed/XBagOm8tJ-Q?list=PLTYZbOVtStqGySBwPhVL07iRH3H7ZOsag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Redux là gì?\nRedux là một thư viện Javascript để quản lý state của ứng dụng, thường được sử dụng chung với ReactJS. Redux Toolkit là một thư viện giúp lập trình viên viết Redux dễ dàng và đơn giản hơn.\n\nỞ bài viết này, chúng ta sẽ cùng tìm hiểu nhanh về redux-toolkit và ứng dụng nhanh vào project của mình với một ví dụ đơn giản là tăng hoặc giảm một biến đếm counter.\n\n<img style=\"maxWidth:512px;display:block;margin:auto;\" alt=\"redux\" src=\"https://i.2kvn.com/img/vib-2021-3eca7a19-82be-4c9f-8bfc-cbeac838106b.png\" />\n\n## Cài đặt Redux Toolkit và React-Redux\n\n### Bước 1. Mở Terminal và nhập lệnh\n\n```shell\n# NPM\nnpm install @reduxjs/toolkit react-redux\n```\n\n### Bước 2. Khởi tạo store\n\n* Store là 1 object chứa tất cả state toàn cục của ứng dụng.\n* Redux-toolkit: sử dụng configureStore để tạo store.\n* Tạo một tệp có tên src/store/index.ts. Import API configStore từ Redux-toolkit. Chúng ta sẽ bắt đầu bằng cách tạo Redux store trống và export nó, sau đó định nghĩa App State và Dispatch Types​ để tham chiếu khi cần sử dụng.\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {},\n})\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n```\n\n### Bước 3. Cung cấp Redux Store vào React App\n\nSau khi store được tạo, ở src/index.tsx, ta wrap `<App/>` bên trong một component hỗ trợ của react-redux là Provider. Nhờ đó tất cả component trong `<App/>` có thể truy cập được store.\n\nFile: `src/index.tsx`\n\n```ts\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById(\"root\")\n```\n\n### Bước 4. Tạo Redux State Slice\n\n* Tạo một file mới đặt tên `src/store/counter.reducer.ts`\n* File này import createSlice API từ Redux-toolkit. Redux-toolkit được sử dụng nhằm kết hợp giữa `actions` và `reducers` lại với nhau. Đó chính là nhiệm vụ của `slice`, được thực thi bằng hàm `createSlice`.\n\nFile: `src/store/counter.reducer.ts`\n\n```ts\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n\n  // 'createSlice' will infer the state type from the 'initialState' argument initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  }\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;\n```\n        \n### Bước 5. Thêm Slice Reducers vào Store\n\n* Chúng ta cần `import counterReducer` từ `./counter.reducer` đã được tạo ở trên và thêm nó vào `store`.\n* Bằng việc định nghĩa `field` bên trong biến `reducer`, chúng ta đã nói với `store` là hãy dùng các các hàm trong `reducer` để xử lý các cập nhật của `state` đó.\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter.reducer\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {counter: counterState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\n### Bước 6. Sử dụng redux tại component\n\nỞ `src/components/counter/index.tsx` ta sẽ:\n* Sử dụng `useSelector` của react-redux để lấy `counter` từ `store`.\n* Sử dụng `useDispatch` để trả về hàm dispatch, truyền `increment` và `decrement` vào `dispatch` để gọi 2 `action` này.\n\nFile: `src/components/counter/index.tsx`\n\n```ts\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState, AppDispatch } from \"store\";\nimport { increment, decrement } from \"store/counter.reducer\";\n\nconst Counter = () => {\n  const count = useSelector((state: AppState) => state.counter.value);\n  const dispatch = useDispatch<AppDispatch>();\n\n  return (\n    <div>\n      <div>Counter</div>\n      <button onClick={() => dispatch(increment())}>Increase Counter</button>\n      <button onClick={() => dispatch(decrement())}>Decrease Counter</button>\n      <p>Counter value: {count}</p>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\n## Ứng dụng vào project: Tạo Wallet Reducer\nBước 1. Cài đặt React-Redux và Redux Toolkit\n\nBước 2. Khởi tạo store\n\nFile: `src/store/index.ts`\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nexport const store = configureStore({\n  reducer: {}\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {wallet: WalletState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\nBước 3. Cung cấp Redux Store vào React App\n\nFile: `src/index.tsx`\n\n```ts\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { WalletKitProvider } from \"@gokiprotocol/walletkit\";\n\nimport App from \"./App\";\nimport { store } from \"store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n     <WalletKitProvider\n        defaultNetwork=\"devnet\"\n        app={{\n          name: \"My App\"\n        }}\n      >\n        <App />\n      </WalletKitProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nBước 4. Tạo Redux State Slice\n\nFile: `src/store/wallet.reducer.ts`\n\n```ts\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface WalletState {\n  walletAddress: string;\n  balance: number;\n}\n\n// Define the initial state using that type\nconst initialState: WalletState = {\n  walletAddress: \"\",\n  balance: 0\n};\n\nexport const walletSlice = createSlice({\n  name: \"wallet\",\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of 'action.payload'\n    setWalletInfo: (state, action: PayloadAction<WalletState>) => {\n    state.walletAddress = action.payload.walletAddress;\n    state.balance = action.payload.balance;\n    }\n  }\n});\n\nexport const { setWalletInfo } = walletSlice.actions;\nexport default walletSlice.reducer;\n```\n\nBước 5. Thêm Slice Reducers vào Store\n\n```ts\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport walletReducer from \"store/wallet.reducer\";\n\nexport const store = configureStore({\n  reducer: {\n    wallet: walletReducer\n  }\n});\n\n// Infer the 'AppState' and 'AppDispatch' types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n\n// Inferred type: {wallet: WalletState}\nexport type AppDispatch = typeof store.dispatch;\n```\n\nBước 6. Sử dụng redux tại component\n\nFile: `src/App.tsx`\n\n```tsx\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  useWalletKit,\n  useSolana,\n  useConnectedWallet\n} from \"@gokiprotocol/walletkit\";\n\nimport { Button, Col, Row, Space } from \"antd\";\nimport WalletInfo from \"components/walletInfo\";\nimport Transfer from \"components/transfer\";\n\nimport { AppDispatch } from \"store\";\nimport { setWalletInfo, WalletState } from \"store/wallet.reducer\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // Goki hooks\n  const wallet = useConnectedWallet();\n  const { connect } = useWalletKit();\n  const { disconnect, providerMut } = useSolana();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const fetchBalance = useCallback(async () => {\n    // TODO: fetch balance\n    let walletInfo: WalletState = {\n      walletAddress: wallet?.publicKey.toBase58() || \"\",\n      balance: 0\n    };\n    if (wallet && providerMut) {\n      walletInfo.balance = await providerMut.connection.getBalance(\n        wallet.publicKey\n      );\n    }\n    dispatch(setWalletInfo(walletInfo));\n  }, [providerMut, wallet]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  return (\n    <Row justify=\"center\" gutter={[24, 24]}>\n      <Col span={12}>\n        <Row gutter={[24, 24]}>\n          <Col span={24} style={{ paddingTop: \"50px\" }}>\n            <WalletInfo />\n          </Col>\n          {/* Button connect wallet */}\n          <Col span={24} style={{ textAlign: \"center\" }}>\n            {wallet ? (\n              <Space>\n                <Button type=\"primary\" onClick={disconnect}>Disconnect</Button>\n                <Button type=\"primary\" onClick={fetchBalance}>Update Wallet</Button>\n              </Space>\n            ) : (\n              // Call connectWallet function when click Button\n              <Button type=\"primary\" onClick={connect}>Connect Wallet</Button>\n            )}\n          </Col>\n          <Col span={24}>\n            <Transfer />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n```\n\nĐây sẽ là giao diện khi chưa kết nối ví:\n\n![wallet](https://lh6.googleusercontent.com/N-SnZT6RfJ9DI-u6qaizJNatyyYmDeQo67jRRU6sP_-y2ctsa2CTFVmBJmRunTkUqLdGeAENA2-WGI_HKWqy9whWcXRO8-rBE4iOC_AVosGe2GQCebyFjkW-9-D5qNUwEcFL4NFT)\n\nĐây là giao diện khi kết nối ví:\n\n![wallet](https://lh6.googleusercontent.com/s7L8itiKGyjsXni2P7jHcZxsZPlsXH9pOD_bhhELOoIAj7Czc9BSOitUXk0K-kdYFEnl14rTsqeFd_G4g0w_uPHEZ5ke0X1cIvaqvOmwdb5-z5gCqmtaMXK8y8nnBFeGfKkN2USw)\n\nVà đây là giao diện khi đã kết nối ví thành công:\n\n![](https://lh3.googleusercontent.com/zBXV_e1YLqzQvsWY0CcBY7iminzkgukLN1j6bNk5y5MjQ7cjOr1qUJD73oymISV-9CtLWQu2SyHsOsPdzhn4FGX7vZDxbQqnH-XyNfKohmmimi9W_h6zXSWuqeSTaCOxNVHX7XSq)\n\nDữ liệu wallet sẽ được lưu ở global store. Bất cứ `component` nào (ví dụ như `Transfer`) cần sử dụng đến dữ liệu này sẽ có thể truy cập để sử dụng, cũng như được cập nhật mới data khi `store` thay đổi.\n\n<br/><button data-tf-popup=\"Yk3yreLD\" data-tf-iframe-props=\"title=[Vietnam Web3 Camp] Bài tập số 3\" data-tf-medium=\"snippet\" style=\"all:unset;font-family:Helvetica,Arial,sans-serif;display:inline-block;max-width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;background-color:#F9575E;color:#FFFFFF;font-size:20px;border-radius:12px;padding:0 33px;font-weight:bold;height:50px;cursor:pointer;line-height:50px;text-align:center;margin:0;text-decoration:none;margin:auto;display:block;\">Làm bài tập</button><script src=\"//embed.typeform.com/next/embed.js\"></script>",
    "title": "Quản lý State của Dapp"
  },
  "id": "975759747453"
}