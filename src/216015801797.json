{
  "createdAt": 1652341125630,
  "updatedAt": 1652342838566,
  "thumbnail": "https://academy.sentre.io/static/media/fsp-thumbnail.2f16d88302c722808aa9.png",
  "category": [
    "dev",
    "blockchain",
    "solana"
  ],
  "en": {
    "contents": "Đối với lập trình viên, quá trình đi từ ý tưởng đến sản phẩm thực tiễn là một con đường gian nan với vô số rào cản, trong đó phần lập trình thô gây nhàm chán nhất.\n\nAnchor ra đời với các bản soạn sẵn phong phú và cơ số bước kiểm tra bảo mật, giúp developer rút ngắn thời gian lập trình thô và tập trung vào công đoạn quan trọng nhất - phát triển sản phẩm của chính mình.\n\n\n## **Tìm hiểu về Anchor**\n### **Anchor là gì?**\nAnchor(1) là một framework giúp các developer phát triển Smart Contract trên Solana nhanh chóng, dễ dàng và an toàn hơn.\n\nAnchor có cách đặc điểm sau:\n\n* Sử dụng ngôn ngữ Rust(2)\n* IDL để chỉ rõ cách hoạt động, sử dụng chương trình\n* Tự động tạo TypeScript Package từ IDL\n* Hỗ trợ nhiều câu lệnh, CLI ngắn gọn dễ dùng\n### **Cài đặt môi trường**\nTìm hiểu thêm thông tin tại (3).\n\n**Bước 1. Cài đặt Rust**\n\n```ts\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\nrustup component add rustfmt\n```\n\n**Bước 2. Cài đặt Solana**\n```ts\nsh -c \"$(curl -sSfL https://release.solana.com/v1.9.1/install)\"\n```\n\n**Bước 3. Cài đặt Yarn**\n\n```ts\nnpm install -g yarn\n```\n\n**Bước 4. Cài đặt Anchor**\n\n```ts\nnpm i -g @project-serum/anchor-cli\n```\n\nTạo ứng dụng đầu tiên\n\nĐể khởi tạo một project mới, bạn hãy chạy lệnh sau:\n\n```ts\nanchor init my_program\ncd my_program\n```\n        \nTrong đó **my_app** là tên project của bạn.\n\nSau khi tạo thành công, cấu trúc project sẽ như sau:\n\n* **programs/my_program/src/lib.rs**: Nơi định nghĩa, lập trình Smart Contract\n* **programs/my_program/Cargo.toml**: Nơi cài đặt các thư viện sử dụng\n* **target**: Nơi chứa dữ liệu sau khi build. Bao gồm IDL\n* **test**: Viết test cho Smart Contract\n<br/>\n![](https://lh4.googleusercontent.com/d5WchPxQgZgavXRJnc01rXXDuxK7j9s3kL-XIWbXfOfn57mtwrV9Z_uWn7X3j5MVYXeCvhjlBRr1GvzD5CzZmxbobcAuSYhYUr2bZ544-QCJtOFMgqan2TlLlgukgB1V1cjWWXiR)\n\n<br/>\n\nChạy test chương trình bằng dòng lệnh:\n\n```ts \nanchor test\n```\nHệ thống sẽ tự động thực thi các bước sau và cho ra kết quả:\n\n* Build smart contract từ file src/lib.rs\n* Tự động Deploy localhost\n* Ghi kết quả vào thư mục target\n* Chạy file test/my_program.ts → phân tích cấu trúc Smart Contract được build từ target/idl/my_program.json → tạo data phù hợp gọi lên Program đã được tự động deploy ở bước 2\n* Trả về kết quả\nKhi chạy **anchor test**, hệ thống đã tự build giúp mình. Nếu muốn build thủ công, bạn có thể dùng câu lệnh: anchor build\n\nSau khi build IDL được tạo ra ở thư mục **target/idl/my_program.json**\n\nMột instruction cũng giống như một hàm thông thường, bao gồm ba thông tin quan trọng là:\n\n* name: Tên hàm, dùng programe.rpc để gọi\n* accounts: Danh sách tài khoản sẽ tương tác\n* arg: tham số truyền vào hàm\n\n\nĐể hiểu rõ hơn, chúng ta sẽ cùng thực hành một ví dụ: Viết một chương trình tính tổng bao gồm:\n\n\n\n| Tên hàm | Logic thực thi | Tham số | Accounts |\n| -------- | -------- | -------- | ------- |\n| InitializeSum   | Thuê tài khoản để lưu kết quả tính tổng   | sum_init: Giá trị ban đầu của tổng| sumAccount: địa chỉ lưu kết quả tính tổng<br/>user: Người trả phí thuê tài khoản <br/>systemProgram: địa chỉ chương trình giúp thuê tài khoản|\n| updateSum | Cập nhật mới tổng | number:  giá trị cộng thêm vào | sumAccount: địa chỉ lưu kết quả tính tổng |\n\n<br/>\n\nMột hàm như vậy còn được gọi là instruction. Để viết và sử dụng một instruction, chúng ta cần đi qua các bước sau:\n\n* Khai báo cấu trúc dữ liệu cho trường hợp tạo mới\n* Khai báo các tài khoản tương tác\n* Khai bao instruction trong main\n### **Bước 1. Khởi tạo**\n1. Khai báo cấu trúc dữ liệu\n\n```ts\n#[account]\npub struct SumAccount {\n  pub sum: u64,\n}\n```\n\n2. Khai báo các tài khoản sẽ tương tác\n\n```ts\n#[derive(Accounts)]\npub struct Initialize<'info> {\n   // địa chỉ thuê\n  #[account(init, payer = user, space = 8 + 8)]\n  pub my_account: Account<'info, MyAccount>,\n\n  // người trả phí giao dịch\n   #[account(mut)]\n  pub user: Signer<'info>,\n\n  // địa chỉ chương trình giúp thuê tài khoản\n   pub system_program: Program<'info, System>,\n}\n```\n\n3. Khai báo hàm thực thi\n\n```ts\npub fn initialize(ctx: Context<Initialize>, sum_init: u64) -> Result<()> {\n  let my_account = &mut ctx.accounts.my_account;\n  my_account.sum = sum_init;\n  Ok(())\n}\n```\n<br/>\n\nChương trình của chúng ta sẽ trông như thế này:\n\n```ts\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\npub mod my_program {\n  use super::*;\n  pub fn initialize_sum(ctx: Context<InitializeSum>, sum_init: u64) -> Result<()> {\n    ctx.accounts.sum_account.sum = sum_init;\n    Ok(())\n  }\n}\n\n#[derive(Accounts)]\n  pub struct InitializeSum<'info> {\n  #[account(init, payer = user, space = 8 + 8)]\n  pub sum_account: Account<'info, SumAccount>,\n  #[account(mut)]\n  pub user: Signer<'info>,\n  pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct SumAccount {\n  pub sum: u64,\n}\n```\n\n4. Chạy anchor build để chương trình tạo IDL\n\n```ts\n\"instructions\": [\n  {\n    \"name\": \"initializeSum\",\n    \"accounts\": [\n      {\n        \"name\": \"sumAccount\",\n        \"isMut\": true,\n        \"isSigner\": true\n      },\n      {\n        \"name\": \"user\",\n        \"isMut\": true,\n        \"isSigner\": true\n      },\n      {\n        \"name\": \"systemProgram\",\n        \"isMut\": false,\n        \"isSigner\": false\n      }\n    ],\n    \"args\": [\n      {\n        \"name\": \"sumInit\",\n        \"type\": \"u64\"\n      }\n    ]\n  }\n],\n```\n\nDựa vào IDL, chúng ta biết được cách sử dụng hàm này từ client bằng typescript. Cập nhật file test như sau:\n\n```ts\nimport { Program, setProvider, web3, Provider, workspace, BN } from \"@project-serum/anchor\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport { MyProgram } from \"../target/types/my_program\";\n\ndescribe(\"my_program\", () => {\n  setProvider(Provider.env());\n  const program = workspace.MyProgram as Program<MyProgram>;\n\n  // Tạo địa chỉ thuê\n  const sumAccount = web3.Keypair.generate();\n  it(\"Is initialized!\", async () => {\n    await program.rpc.initializeSum(new BN(1), {\n      accounts: {\n        sumAccount: sumAccount.publicKey,\n        user: program.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [sumAccount],\n    });\n\n    let sumAccountData = await program.account.sumAccount.fetch(sumAccount.publicKey);\n    console.log(\"sumAccountData\", sumAccountData.sum);\n  }\n);\n```\n\n<br/>\n\nChạy anchor test cho ra kết quả:\n\n![](https://lh5.googleusercontent.com/pb6D0IIKmMDPdg4tth8B6ijlQXAShQj0-R-GdInGHc4PBe3inniwwurJKt-BrdJfoaqFJ832k3IaVw_0kp_0iLBo9eOcJRNB9x49HNEPpfl83qqaPonYlwxs0i1nb3MRZMMgTtEN)\n\n\nVậy là chúng ta đã thuê thành công một tài khoản để chứa dữ liệu tính tổng.\n\n\n### **Bước 2. Cập nhật dữ liệu**\nLúc này, account chứa dữ liệu đã được tạo nên không cần khai báo cấu trúc SumAccount nữa. Cập nhật các tài khoản tương tác và khai báo instruction:\n\n```ts\n#[derive(Accounts)]\npub struct UpdateSum<'info> {\n  #[account(mut)]\n  pub sum_account: Account<'info, SumAccount>,\n}\n```\n<br/>\n\n```ts\npub fn update_sum(ctx: Context<UpdateSum>, number: u64) -> Result<()> {\n  ctx.accounts.sum_account.sum += number;\n  Ok(())\n}\n```\n<br/>\n\nChương trình sẽ trông như thế này:\n\n```ts\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\npub mod my_program {\n  use super::*;\n  pub fn initialize_sum(ctx: Context<InitializeSum>, sum_init: u64) -> Result<()> {\n    ctx.accounts.sum_account.sum = sum_init;\n    Ok(())\n  }\n\npub fn update_sum(ctx: Context<UpdateSum>, number: u64) -> Result<()> {\n  ctx.accounts.sum_account.sum += number;\n  Ok(())\n  }\n}\n\n#[derive(Accounts)]\npub struct InitializeSum<'info> {\n   #[account(init, payer = user, space = 8 + 8)]\n  pub sum_account: Account<'info, SumAccount>,\n  #[account(mut)]\n  pub user: Signer<'info>,\n  pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct UpdateSum<'info> {\n  #[account(mut)]\n  pub sum_account: Account<'info, SumAccount>,\n}\n\n#[account]\npub struct SumAccount {\n  pub sum: u64,\n}\n```\n<br/>\n\nGọi từ client:\n\n```ts\nit(\"Update sum!\", async () => {\n  await program.rpc.updateSum(new BN(2), {\n    accounts: {\n      sumAccount: sumAccount.publicKey,\n    },\n  });\n\n  let sumAccountData = await program.account.sumAccount.fetch(sumAccount.publicKey);\n  console.log(\"sumAccountData\", sumAccountData.sum);\n});\n```\n\nChạy anchor test và cho ra kết quả:\n\nSum đã được cập nhật từ 1 lên 3.\n\nVậy là chúng ta vừa đi qua 2 ví dụ cơ bản của lập trình trên blockchain. Hãy xem video để thực hành và bình luận nếu có thắc mắc nhé!\n\n\n# **Các tài liệu tham khảo**\n1. https://project-serum.github.io/anchor/getting-started/introduction.html\n2. https://doc.rust-lang.org/book/\n3. https://project-serum.github.io/anchor/getting-started/installation.html",
    "title": "Viết phần mềm Solana đầu tiên"
  },
  "vn": {
    "title": "",
    "contents": ""
  }
}